<?php

namespace AppBundle\Command;

use AppBundle\Entity\Invoice;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;

/**
 * Class DeliverInvoiceByEmailCommand.
 */
class DeliverInvoiceByEmailCommand extends ContainerAwareCommand
{
    /**
     * Configure command.
     */
    protected function configure()
    {
        $this
            ->setName('app:deliver:invoice')
            ->setDescription('Deliver an invoice previously generated by email')
            ->addArgument(
                'invoice',
                InputArgument::REQUIRED,
                'The invoice ID stored in database'
            )
            ->addOption(
                'force',
                null,
                InputOption::VALUE_NONE,
                'If set, the task will deliver the email'
            )
        ;
    }

    /**
     * Execute command.
     *
     * @param InputInterface  $input
     * @param OutputInterface $output
     *
     * @return int|null|void
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $output->writeln('<info>Welcome to '.$this->getName().' command</info>');

        /** @var Invoice|null $receipt */
        $receipt = $this->getContainer()->get('doctrine')->getRepository('AppBundle:Invoice')->find(intval($input->getArgument('invoice')));
        if ($receipt) {
        } else {
            $output->writeln('<error>No invoice with ID#'.intval($input->getArgument('invoice')).' found. Nothing send.</error>');
        }

        $output->writeln('<info>EOF.</info>');
    }
}
